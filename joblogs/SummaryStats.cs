using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Threading.Tasks;

namespace joblogs
{
    // Summary Stats takes as input, the memEff file generated by MemEff.GenerateMemEffFile()
    class SummaryStatsModel
    {
        public string Id { get; set; }              // either User or Account
        public long JobCount { get; set; } = 0;
        public long CoreHoursTotal { get; set; } = 0;
        public long GBHoursReqTotal { get; set; } = 0;
        public long GBHoursUsedTotal { get; set; } = 0;
    }
    class SummaryStats
    {
        private static Dictionary<string, SummaryStatsModel> UserStats = new Dictionary<string, SummaryStatsModel>();
        private static Dictionary<string, SummaryStatsModel> AccountStats = new Dictionary<string, SummaryStatsModel>();
        public static void GenerateFile(Configurator cfg)
        {
            int counter = 0;
            string line = "";

            using (StreamReader sr = new StreamReader(cfg.MemEffFile))
            {
                line = sr.ReadLine();   // header row is first line
                var colRef = GetColumnReferences(cfg, line);
                Console.WriteLine("");

                while ((line = sr.ReadLine()) != null)
                {
                    var thisRec = line.Split(cfg.Delimiter);

                    if (!UserStats.ContainsKey(thisRec[colRef["User"]]))
                    {
                        var temp = new SummaryStatsModel
                        {
                            Id = thisRec[colRef["User"]]
                        };

                        UserStats.Add(thisRec[colRef["User"]], temp);
                    }

                    if (!AccountStats.ContainsKey(thisRec[colRef["Account"]]))
                    {
                        var temp = new SummaryStatsModel
                        {
                            Id = thisRec[colRef["Account"]]
                        };
                        AccountStats.Add(thisRec[colRef["Account"]], temp);
                    }


                    int GBHoursReq = int.Parse(thisRec[colRef["GBHoursRequested"]]);
                    int GBHoursUsed = int.Parse(thisRec[colRef["GBHoursUsed"]]);

                    double hrs = MemEff.ConvertTimeStringToHours(thisRec[colRef["Elapsed"]]);
                    int CoreHours = (int)(hrs * int.Parse(thisRec[colRef["NCPUS"]]));

                    UserStats[thisRec[colRef["User"]]].JobCount += 1;
                    UserStats[thisRec[colRef["User"]]].GBHoursReqTotal += GBHoursReq;
                    UserStats[thisRec[colRef["User"]]].GBHoursUsedTotal += GBHoursUsed;
                    UserStats[thisRec[colRef["User"]]].CoreHoursTotal += CoreHours;

                    AccountStats[thisRec[colRef["Account"]]].JobCount += 1;
                    AccountStats[thisRec[colRef["Account"]]].GBHoursReqTotal += GBHoursReq;
                    AccountStats[thisRec[colRef["Account"]]].GBHoursUsedTotal += GBHoursUsed;
                    AccountStats[thisRec[colRef["Account"]]].CoreHoursTotal += CoreHours;

                    counter++;
                    if (counter % 1000 == 0)
                        Console.Write($"\r  Rows Processed: {String.Format("{0:n0}", counter)}");
                }

                Console.Write($"\r  Rows Processed: {String.Format("{0:n0}", counter)}{Environment.NewLine}");
            }

            WriteOutput(cfg, "User", UserStats);
            WriteOutput(cfg, "Account", AccountStats);
        }

        private static void WriteOutput(Configurator cfg, string UserOrAccount, Dictionary<string, SummaryStatsModel> d)
        {
            StringBuilder sb = new StringBuilder();

            sb.Append(UserOrAccount);
            sb.Append(cfg.Delimiter);
            sb.Append("JobCount");
            sb.Append(cfg.Delimiter);
            sb.Append("AvgCoreHoursPerJob");
            sb.Append(cfg.Delimiter);
            sb.Append("CoreHours");
            sb.Append(cfg.Delimiter);
            sb.Append("GBHoursAllocated");
            sb.Append(cfg.Delimiter);
            sb.Append("GBHoursUsed");
            sb.Append(cfg.Delimiter);
            sb.Append("PercentGBHoursUsed");
            sb.Append(Environment.NewLine);

            foreach (var item in d)
            {
                sb.Append(item.Key);
                sb.Append(cfg.Delimiter);

                sb.Append(item.Value.JobCount);
                sb.Append(cfg.Delimiter);

                double AvgCoreHrsPerJob = item.Value.CoreHoursTotal / item.Value.JobCount;
                sb.Append(Math.Round(AvgCoreHrsPerJob, 1));
                sb.Append(cfg.Delimiter);

                sb.Append(item.Value.CoreHoursTotal);
                sb.Append(cfg.Delimiter);

                sb.Append(item.Value.GBHoursReqTotal);
                sb.Append(cfg.Delimiter);

                sb.Append(item.Value.GBHoursUsedTotal);
                sb.Append(cfg.Delimiter);

                double pct = 0.0;
                if (item.Value.GBHoursReqTotal > 0)
                    pct = (item.Value.GBHoursUsedTotal / (double)item.Value.GBHoursReqTotal) * 100.0;
                sb.Append(Math.Round(pct, 1));
                sb.Append(Environment.NewLine);
            }

            string outFile = Path.Combine(cfg.OutputLocation, $"summaryStats-{UserOrAccount}.txt");
            File.WriteAllText(outFile, sb.ToString());
            sb.Clear();
        }


        private static Dictionary<string, int> GetColumnReferences(Configurator cfg, string headerLine)
        {
            // create a dictionary of Columns from the memEff file, including the index of each of those
            // so we can directly reference and iterate through just the fields of interest
            // using colRef makes the code more resiliant to changes in file structure

            Dictionary<string, int> d = new Dictionary<string, int>();
            var columnsInFile = headerLine.Split(cfg.Delimiter);

            for (int i = 0; i < columnsInFile.Length; i++)
            {
                d.Add(columnsInFile[i], i);
                // Console.WriteLine($"{i}:{columnsInFile[i]}");
            }

            return d;
        }

    }
}
